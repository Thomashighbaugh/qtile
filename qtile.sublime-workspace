{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"layo",
				"layout_theme\tstatement"
			],
			[
				"lay",
				"layouts\tstatement"
			],
			[
				"padding",
				"padding-left\tproperty"
			],
			[
				"margin",
				"margin-left\tproperty"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "from libqtile.config import Key, Drag, Click\nfrom libqtile.command import lazy\n\nfrom functions import Function\n\n\nclass Keys(object):\n\n    ##### GENERAL KEYBINDINGS #####\n\n    def init_keys(self):\n        # Key alias\n        mod = \"mod4\"\n        alt = \"mod1\"\n        altgr = \"mod3\"\n\n        return [\n            # On root\n            Key([mod], \"Return\",\n                lazy.spawn(\"kitty\")),\n\n            Key([mod], \"r\",\n                lazy.restart()),  # Restart Qtile\n            Key([mod, altgr], \"Delete\",\n                lazy.shutdown()),  # Shutdown Qtile\n\n            Key([mod], \"p\", lazy.spawncmd()),  # Launch Qtile prompt\n\n            # On window\n\n            Key([mod], \"Home\",\n                lazy.spawn(\"rofi -dpi  -show drun -theme ~/.config/qtile/rofi/appmenu/rofi.rasi\")),\n            # Bring window to front\n            Key(\n                [mod, \"shift\"], \"Return\",\n                lazy.spawn(\"dmenu_run -p 'Run: '\"),\n                desc='Dmenu Run Launcher'\n            ),\n            Key([mod], \"Tab\",\n                lazy.next_layout()),  # Cycle Layouts\n\n            Key([mod], \"End\",\n                lazy.group[\"\"].toscreen()),  # Go to minimized windows gruop\n            Key([mod, \"shift\"], \"End\",\n                lazy.window.togroup(\"\")),  # Move to minimized windows group\n            Key([mod, \"control\"], \"End\",\n                lazy.window.togroup(\"\"),\n                lazy.group[\"\"].toscreen()),  # Move with to minimized windows group\n            Key([mod], \"End\",\n                lazy.window.toggle_minimize()),  # Toogle minimize\n            Key([mod], \"j\", lazy.layout.down()),  # Switch to next window\n            Key([mod], \"k\", lazy.layout.up()),  # Switch to previous window\n\n            Key([mod, \"shift\"], \"j\",\n                lazy.layout.shuffle_down()),  # Move windows down in current stack\n            Key([mod, \"shift\"], \"k\",\n                lazy.layout.shuffle_up()),  # Move windows up in current stack\n\n            Key([mod, \"control\"], \"j\",\n                lazy.layout.client_to_previous()),  # Move window to previous stack side\n            Key([mod, \"control\"], \"k\",\n                lazy.layout.client_to_next()),  # Move window to next stack side\n\n            Key([alt], \"Tab\",\n                lazy.group.next_window(),  # Switch focus to other window\n                lazy.window.bring_to_front()),  # Switch focus to other window + front\n            Key([alt, \"shift\"], \"Tab\",\n                lazy.group.prev_window(),\n                lazy.window.bring_to_front()),  # Switch focus to other window\n\n            Key([mod], \"x\",\n                lazy.window.kill()),  # Kill active window\n            Key([mod, alt], \"x\",\n                lazy.spawn(\"xkill\")),  # Terminate program\n            Key([mod, \"shift\"], \"x\",\n                Function.kill_all_windows_minus_current()),  # Kill all windows except current\n            Key([mod, \"control\"], \"x\",\n                Function.kill_all_windows()),  # Kill all windows\n\n            Key([mod], \"f\",\n                lazy.window.toggle_floating()),  # Toggle floating\n\n            # On layout\n\n            Key([mod], \"backslash\",\n                lazy.layout.swap_main()),  # Swap current window to main pane (Xmonad)\n\n            Key([mod], \"m\",\n                lazy.layout.next()),  # Move focus to another stack (Stack)\n\n            Key([mod], \"h\", lazy.layout.shrink()),  # Shrink size of window (Xmonad)\n            Key([mod], \"l\", lazy.layout.grow()),  # Grow size of window (Xmonad)\n\n            Key([mod, \"shift\"], \"h\",\n                # lazy.layout.decrease_nmaster(),\t\t\t# Decrease number in master pane (Tile)\n                lazy.layout.shrink_main()),  # Shrink size of main window (Xmonad)\n            Key([mod, \"shift\"], \"l\",\n                # lazy.layout.increase_nmaster(),\t\t\t# Increase number in master pane (Tile)\n                lazy.layout.grow_main()),  # Grow size of main window (Xmonad)\n\n            Key([mod, \"shift\"], \"n\",\n                lazy.layout.normalize()),  # Restore all windows to default size ratios\n            Key([mod, \"shift\"], \"m\",\n                lazy.layout.maximize()),  # Toggle a window between min and max sizes\n\n            Key([mod, \"shift\"], \"space\",\n                lazy.layout.rotate(),  # Swap panes of split stack (Stack)\n                lazy.layout.flip()),  # Switch side main pane occupies (Xmonad)\n\n            Key([mod, \"shift\"], \"Return\",\n                lazy.layout.toggle_split()),  # Toggle between split and unsplit (Stack)\n\n            Key([mod], \"Up\", lazy.prev_layout()),  # Toggle through layouts\n            Key([mod], \"Down\", lazy.next_layout()),  # Toggle through layouts\n\n            # On group\n\n            Key([mod], \"z\",\n                lazy.screen.togglegroup()),  # Move to previous visited group\n            Key([mod, \"shift\"], \"i\",\n                lazy.next_urgent()),  # Move to next urgent group\n\n            Key([mod], \"Left\",\n                lazy.screen.prev_group()),  # Move to previous group\n            Key([mod], \"Right\",\n                lazy.screen.next_group()),  # Move to next group\n\n            Key([mod, \"shift\"], \"Left\",\n                Function.window_to_prev_group()),  # Move window to previous group\n            Key([mod, \"shift\"], \"Right\",\n                Function.window_to_next_group()),  # Move window to next group\n\n            Key([mod, \"control\"], \"Left\",\n                Function.window_to_prev_group(),\n                lazy.screen.prev_group()),  # Move with window to previous group\n            Key([mod, \"control\"], \"Right\",\n                Function.window_to_next_group(),\n                lazy.screen.next_group()),  # Move with window to next group\n\n            # On screen\n\n            Key([mod], \"Page_Up\",\n                lazy.prev_screen()),  # Switch to previous screen\n            Key([mod], \"Page_Down\",\n                lazy.next_screen()),  # Switch to next screen\n\n            Key([mod, \"shift\"], \"Page_Up\",\n                Function.window_to_prev_screen()),  # Move window to previous screen\n            Key([mod, \"shift\"], \"Page_Down\",\n                Function.window_to_next_screen()),  # Move window to next screen\n\n            Key([mod, \"control\"], \"Page_Up\",\n                Function.swap_prev_screen()),  # Swap active groups on screens\n            Key([mod, \"control\"], \"Page_Down\",\n                Function.swap_next_screen()),  # Swap active groups on screens\n\n            # On bar\n\n            Key([mod, alt], \"slash\",\n                lazy.hide_show_bar(\"all\")),  # Toggle all screen bars\n            # Key([mod, \"shift\"], \"slash\",\n            # \tlazy.hide_show_bar(\"top\")),\t\t\t\t\t# Toggle top screen bar\n            # Key([mod, \"control\"], \"slash\",\n            # \tlazyFd.hide_show_bar(\"bottom\"))\t\t\t\t# Toggle bottom screen bar\n\n            Key([mod, \"control\"], \"Home\",\n                lazy.spawn(\".config/qtile/rofi/appmenu/applaunch.sh\")),  # App Quicklauncher\n            Key([mod, ], \"F2\",\n                lazy.spawn(\"firefox-developer-edition\")),  # Browser\n            Key([mod, ], \"F3\",\n                lazy.spawn(\"thunar\")),  # File Manager\n            Key([mod, alt], \"F3\",\n                lazy.spawn(\"kitty -e sudo ranger\")),  # Terminal File Manager\n            Key([mod, \"control\"], \"F4\",\n                lazy.spawn(\"emojipick\")),  # Emoji to Clipboard\n            Key([mod], \"F4\",\n                lazy.spawn(\"fa-rofi\")),  # Font Awesome Icon TO Clipboard\n            Key([mod], \"F5\",\n                lazy.spawn(\".config/qtile/rofi/network/network.sh\")),  # Network Menu\n            Key([mod, alt ], \"F5\",\n                lazy.spawn(\".config/qtile/rofi/power/power.sh\")),  # Power Menu\n\t\t\tKey([mod], \"F6\",\n\t\t\t\tlazy.spawn(\"emacs --with-profile doom\")),  # Note Application\n\t\t\tKey([mod, alt], \"F6\",\n                lazy.spawn(\"kitty -e joplin\")),  # Note Application\n            Key([mod], \"Print\",\n                lazy.spawn(\".config/qtile/rofi/screenshot/screenshot.sh\")),  # Print Screen\n        ]\n\n    ##### GROUPS KEYBINDINGS #####\n\n    def init_group_keybindings(self, groups):\n        # Key alias\n        mod = \"mod4\"\n        alt = \"mod1\"\n        altgr = \"mod3``\"\n\n        group_keys = []\n        group_keys += [str(i) for i in range(1, 10)]\n        group_keys += [\"0\", \"minus\", \"equal\"]\n\n        keys = []\n\n        # For all, less the group for \"minimized\" windows\n        for i, group in enumerate(groups[0:-1]):\n            # Switch to another group\n            keys.append(Key([mod], group_keys[i], lazy.group[group.name].toscreen()))\n\n            # Move current window to another group\n            keys.append(Key([mod, \"shift\"], group_keys[i], lazy.window.togroup(group.name)))\n\n            # Move with current window to another group\n            keys.append(Key([mod, \"control\"], group_keys[i],\n                            lazy.window.togroup(group.name),\n                            lazy.group[group.name].toscreen()))\n\n        return keys\n\n\nclass Mouses(object):\n\n    ##### MOUSE #####\n\n    def init_mouse(self):\n        # Key alias\n        mod = \"mod4\"\n        alt = \"mod1\"\n        altgr = \"mod3\"\n\n        return [\n            # Move floating windows\n            Drag(\n                [mod], \"Button1\", lazy.window.set_position_floating(),\n                start=lazy.window.get_position()\n            ),\n\n            # Resize floating windows\n            Drag(\n                [mod], \"Button3\", lazy.window.set_size_floating(),\n                start=lazy.window.get_size()\n            ),\n\n            # Bring to front\n            Click([mod, alt], \"Button1\", lazy.window.bring_to_front())\n        ]\n\n# vim: tabstop=4 shiftwidth=4 noexpandtab\n",
			"file": "bindings.py",
			"file_size": 9595,
			"file_write_time": 132370884741177113,
			"settings":
			{
				"buffer_size": 9597,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "old/keys.py",
			"settings":
			{
				"buffer_size": 5150,
				"line_ending": "Unix"
			}
		},
		{
			"file": "groups.py",
			"settings":
			{
				"buffer_size": 5651,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "old/groups.py",
			"settings":
			{
				"buffer_size": 1027,
				"line_ending": "Unix"
			}
		},
		{
			"file": "old/layouts.py",
			"settings":
			{
				"buffer_size": 1246,
				"line_ending": "Unix"
			}
		},
		{
			"file": "screens.py",
			"settings":
			{
				"buffer_size": 1843,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "config.py",
			"settings":
			{
				"buffer_size": 1970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "aesthetics.py",
			"settings":
			{
				"buffer_size": 1324,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "##### COLORS #####\ncolors = [[\"#24262d\", \"#17161b\"],  # panel background\n          [\"#2d2f3d\", \"#2d2f3d\"],  # background for current screen tab\n          [\"#edeeff\", \"#edeeff\"],  # font color for group names\n          [\"#00caff\", \"#00caff\"],  # border line color for current tab\n          [\"#2EB7F0\", \"#00caff\"],  # border line color for other tab and odd widgets\n          [\"#ff9cff\", \"#f850ac\"],  # color for the even widgets\n          [\"#edeeff\", \"#edeeff\"]]  # window name\n",
			"file": "theme.py",
			"file_size": 477,
			"file_write_time": 132368517024780525,
			"settings":
			{
				"buffer_size": 477,
				"line_ending": "Unix"
			}
		},
		{
			"file": "rofi/power/power.rasi",
			"settings":
			{
				"buffer_size": 5120,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/tlh/.config/rofi/themes/apps.rasi",
			"settings":
			{
				"buffer_size": 1663,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"Insta",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 144.0,
		"history":
		[
			"mkbook"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/tlh/.config/qtile",
		"/home/tlh/.config/qtile/old"
	],
	"file_history":
	[
		"/home/tlh/.config/qtile/aesthetics.py",
		"/home/tlh/.config/qtile/old/theme.py",
		"/home/tlh/.config/qtile/widgets_list_sep.py",
		"/home/tlh/.config/qtile/widgets.py",
		"/home/tlh/.config/qtile/groups.py",
		"/home/tlh/.config/awesome/autorun.sh",
		"/home/tlh/.config/qtile/autostart.sh",
		"/home/tlh/.config/qtile/config.py",
		"/home/tlh/.config/qtile/rofi/network/network.rasi",
		"/home/tlh/.config/qtile/rofi/appmenu/applaunch.rasi",
		"/home/tlh/.config/qtile/rofi/appmenu/applaunch.sh",
		"/home/tlh/bin/menu_apps",
		"/home/tlh/.config/qtile/keys.py",
		"/home/tlh/.config/qtile/rofi/power/power.rasi",
		"/home/tlh/.config/qtile/rofi/screenshot/screenshot.sh",
		"/home/tlh/.config/qtile/rofi/screenshot/screenshot.rasi",
		"/home/tlh/.config/rofi/themes/network.rasi",
		"/home/tlh/.config/qtile/rofi/power/power.sh",
		"/home/tlh/.config/qtile/rofi/network/network.sh",
		"/home/tlh/bin/menu_network",
		"/home/tlh/.config/rofi/themes/colorschemes/tlh.rasi",
		"/home/tlh/.config/rofi/themes/colors.rasi",
		"/home/tlh/Downloads/qtile-config-master/misc/scrot1.png",
		"/home/tlh/Downloads/qtile-config-master/misc/wallpaper.jpg",
		"/home/tlh/1/awakening/src/awakening/index.md",
		"/home/tlh/1/awakening/custom.css",
		"/home/tlh/1/awakening/src/images/mahadev.png",
		"/home/tlh/1/awakening/src/awakening/rishistruth.md",
		"/home/tlh/1/awakening/src/awakening/hinduframework.md",
		"/home/tlh/1/awakening/src/SUMMARY.md",
		"/home/tlh/1/awakening/book.toml",
		"/home/tlh/1/awakening/extra-setup.sh",
		"/home/tlh/1/awakening/src/introduction.md",
		"/home/tlh/1/DSC_6901Aa.jpg",
		"/home/tlh/1/awakening/src/images/durga-yantra.jpg",
		"/home/tlh/1/awakening/src/images/DurgaMa.jpg"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\"f\"",
			"\"Tab\"",
			"(),\t\t\t\t\t",
			"\"Tab",
			"altgr"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/home/tlh/.config/qtile"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "bindings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9597,
						"regions":
						{
						},
						"selection":
						[
							[
								6699,
								6699
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2234.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "old/keys.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5150,
						"regions":
						{
						},
						"selection":
						[
							[
								5146,
								5146
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2400.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "groups.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5651,
						"regions":
						{
						},
						"selection":
						[
							[
								274,
								274
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "old/groups.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1027,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "old/layouts.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1246,
						"regions":
						{
						},
						"selection":
						[
							[
								921,
								921
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "screens.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1843,
						"regions":
						{
						},
						"selection":
						[
							[
								1452,
								1452
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 429.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "config.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1970,
						"regions":
						{
						},
						"selection":
						[
							[
								1285,
								1285
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "aesthetics.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1324,
						"regions":
						{
						},
						"selection":
						[
							[
								801,
								801
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "theme.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 477,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "rofi/power/power.rasi",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5120,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/tlh/.config/rofi/themes/apps.rasi",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1663,
						"regions":
						{
						},
						"selection":
						[
							[
								1663,
								1663
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
